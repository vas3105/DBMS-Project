@page "/Login"
@inject EmployeeStateService EmployeeState
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="login-form">
    <DataAnnotationsValidator />
    <ValidationSummary class="validation-summary" />

    <div class="form-group">
        <label for="employeeId" class="form-label">Employee ID</label>
        <InputNumber @bind-Value="loginModel.EmployeeId" id="employeeId"
                     class="form-input" placeholder="Enter ID (101-110)" />
        <ValidationMessage For="@(() => loginModel.EmployeeId)" class="validation-message" />
    </div>

    <div class="form-group">
        <label for="password" class="form-label">Password</label>
        <InputText @bind-Value="loginModel.Password" type="password" id="password"
                   class="form-input" placeholder="Enter password" />
        <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
    </div>

    <button type="submit" class="login-button">Login</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
</EditForm>

<style>
    .login-form {
        max-width: 400px;
        margin: 2rem auto;
        padding: 2rem;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
    }

    .form-input {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

        .form-input:focus {
            border-color: #4a6cf7;
            outline: none;
            box-shadow: 0 0 0 3px rgba(74, 108, 247, 0.1);
        }

    .login-button {
        width: 100%;
        padding: 0.75rem;
        background-color: #4a6cf7;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .login-button:hover {
            background-color: #3a5bd9;
        }

    .validation-summary {
        color: #dc3545;
        margin-bottom: 1rem;
        padding: 0.5rem;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .error-message {
        margin-top: 1rem;
        padding: 0.75rem;
        background-color: #f8d7da;
        color: #dc3545;
        border-radius: 6px;
        border: 1px solid #f5c6cb;
    }

    /* Add some animation for better UX */
    .form-input, .login-button {
        transition: all 0.3s ease;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;

    private void HandleLogin()
    {
        // Validate credentials
        if (loginModel.EmployeeId >= 101 && loginModel.EmployeeId <= 110 &&
            loginModel.Password == "vasavi")
        {
            // Set the employee ID in the state service
            EmployeeState.EmployeeId = loginModel.EmployeeId.ToString();

            // Navigate to home or dashboard
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid credentials. Employee ID must be between 101-110 ";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Employee ID is required")]
        [Range(101, 110, ErrorMessage = "Employee ID ")]
        public int EmployeeId { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}