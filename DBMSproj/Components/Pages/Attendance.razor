@page "/attendance"
@using System.Text
@using Microsoft.JSInterop
@inject IJSRuntime JS
@using DBMSproj.Services
@inject AttendanceService attendanceService
@inject EmployeeStateService EmployeeState
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Forms

<style>
    body {
    font-family: Arial, sans-serif;
    background-color: #f7f9fc;
    margin: 0;
    padding: 0;
    }

    .container {
    width: 70%;
    margin: 0 auto;
    padding: 20px;
    background-color: #ffffff;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .profile-section, .attendance-section, .leave-section {
    margin-bottom: 20px;
    }

    h2 {
    color: #333333;
    margin-bottom: 15px;
    }

    table {
    width: 100%;
    border-collapse: collapse;
    }

    table, th, td {
    border: 1px solid #ddd;
    padding: 10px;
    }

    th {
    background-color: #f4f4f4;
    text-align: left;
    }

    form label {
    display: block;
    margin-bottom: 5px;
    }

    form input, button {
    width: 100%;
    margin-bottom: 10px;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
    }

    button {
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
    }

    button:hover {
    background-color: #0056b3;
    }
</style>

<div class="container">
    <!-- Profile Section -->
    <div class="profile-section">
        <label>Employee ID:</label>
        <input type="text" id="employeeId" name="employeeId" readonly>
    </div>

    <!-- Attendance Section -->
    <div class="attendance-section">
        <h2>Attendance</h2>
        <table>
            <thead>
                <tr>
                    <th>Attendance ID</th>
                    <th>Date</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in attendanceRecords)
                {
                    <tr>
                        <td>@record.Atid</td>        
                        <td>@record.ADate.ToShortDateString()</td>
                        <td>@record.Status</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
    <div class="leave-section">
        <h2>Apply Leave</h2>
        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div style="color: green; margin-bottom: 10px;">@successMessage</div>
        }

        <EditForm Model="@leaveApplication" OnValidSubmit="SubmitLeave">
            <label for="startDate">Start Date:</label>
            <InputDate id="startDate" @bind-Value="leaveApplication.Start_date" class="form-control" />

            <label for="endDate">End Date:</label>
            <InputDate id="endDate" @bind-Value="leaveApplication.End_date" class="form-control" />

            <label for="type">Type:</label>
            <InputText id="type" @bind-Value="leaveApplication.type" class="form-control" />

            <!-- Display Status (Read-only) -->
            <label for="status">Status:</label>
            <InputText id="status" @bind-Value="leaveApplication.Status" class="form-control" readonly />

            <button type="submit">Apply Leave</button>
        </EditForm>
    </div>
</div>
@code {
        private int employeeId;
        private List<AttendanceRecord> attendanceRecords = new();
        private LeaveApplication leaveApplication = new() { Status = "Pending" };
        private string? successMessage;
        protected override async Task OnInitializedAsync()
        {
            // Subscribe to employee state changes
            EmployeeState.OnChange += HandleEmployeeChanged;

            // Get initial employee ID
            await SetEmployeeFromState();
        }
        private async Task SubmitLeave()
        {
        leaveApplication.EmpId = employeeId;

        try
        {
            await attendanceService.AddLeaveApplicationAsync(leaveApplication);
            successMessage = "Leave application submitted successfully!";
        }
        catch (Exception ex)
        {
            successMessage = $"Failed to submit leave: {ex.Message}";
        }

        leaveApplication = new LeaveApplication { Status = "Pending" };
        }
        private async Task SetEmployeeFromState()
        {
            if (int.TryParse(EmployeeState.EmployeeId, out int parsedId))
            {
                employeeId = parsedId;
                await LoadEmployeeData();
            }
        }
        private async Task LoadEmployeeData()
        {
            attendanceRecords = await attendanceService.GetAttendanceRecordsAsync(employeeId);
            StateHasChanged(); // Refresh UI
        }

        private async void HandleEmployeeChanged()
        {
            await SetEmployeeFromState();
        }

        public void Dispose()
        {
            EmployeeState.OnChange -= HandleEmployeeChanged;
        }



}
